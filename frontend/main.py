import pandas as pd
import streamlit as st
import requests


BACKEND_PATH = 'https://llm-service-urga.onrender.com'



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Streamlit –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if 'df' not in st.session_state:
    result = requests.get(f'{BACKEND_PATH}/prompts').json()
    st.session_state.df = result # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'df'

df = pd.DataFrame(st.session_state.df)

if 'prompt_data' not in st.session_state:
    st.session_state.prompt_data = {}

st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–µ—Ä—Å–∏–π prompt'–æ–≤")
st.divider()

with st.sidebar:
    project_name = st.selectbox(
        "–ü—Ä–æ–µ–∫—Ç",
        [''] + list(df['project_name'].unique())
    )

    labels_func = df[df['project_name'] == project_name] if project_name else df
    func_name = st.selectbox(
        "–§—É–Ω–∫—Ü–∏—è",
        [''] + list(labels_func['func_name'].unique()),
    )

    labels_prompt = df[(df['project_name'] == project_name) & (df['func_name'] == func_name)]\
        if (project_name and func_name) else df
    prompt = st.selectbox(
        "Prompt",
        [''] + list(labels_prompt['prompt'].unique()),
    )

    label_llm = df[(df['project_name'] == project_name) & (df['func_name'] == func_name) & (df['prompt'] == prompt)]\
        if (project_name and func_name and prompt) else df
    llm_name = st.selectbox(
        "LLM",
        [''] + list(label_llm['llm_name'].unique()),
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if all([project_name, func_name, prompt, llm_name]) and (project_name, func_name, prompt, llm_name) != st.session_state.prompt_data:
    st.session_state.prompt_data = (project_name, func_name, prompt, llm_name)

    result = requests.get(f'{BACKEND_PATH}/get_prompt/{project_name}/{func_name}/{prompt}/{llm_name}').json()
    st.session_state.prompt_data = result

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
if st.session_state.prompt_data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ prompt_data

    st.subheader("–¢–µ–∫—Å—Ç Prompt'a")

    result = requests.get(f'{BACKEND_PATH}/get_prompt/{project_name}/{func_name}/{prompt}/{llm_name}').json()
    new_prompt = st.text_input(label=' ', value=result['prompt'])

    st.divider()

    st.subheader('–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    st.markdown(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π Prompt: **{result["prompt"]}**')
    st.markdown(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π LLM: **{result["llm_name"]}**')

    new_score = st.number_input("–û—Ü–µ–Ω–∫–∞", value=result['score'], step=1, min_value=0, max_value=100)

    new_com = st.text_input(label='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', value=result['comment'])

    if st.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'):
        try:
            body = {
                "id": result['id'],
                "prompt": new_prompt,
                "score": new_score,
                "comment": new_com
            }
            requests.put(f'{BACKEND_PATH}/update_prompt', params=body)
        except:
            st.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º —É—Å–ª—É–≥')
        else:
            st.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

else:
    st.error('–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏', icon="üö®")
